name: CI SauceDemo Automation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install dependencies
      run: dotnet restore

    - name: Get browser versions
      run: |
        echo "CHROME_VERSION=$(google-chrome --version | grep -oP '\\d+\\.\\d+\\.\\d+\\.\\d+')" >> $GITHUB_ENV
        echo "FIREFOX_VERSION=$(firefox --version | grep -oP '\\d+\\.\\d+')" >> $GITHUB_ENV
        echo "EDGE_VERSION=$(microsoft-edge --version | grep -oP '\\d+\\.\\d+\\.\\d+\\.\\d+')" >> $GITHUB_ENV

    - name: Install ChromeDriver to match Chrome
      run: |
        CHROME_MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d'.' -f1)
        echo "Installing ChromeDriver version $CHROME_MAJOR_VERSION"
        wget -q -O /tmp/chromedriver.zip https://storage.googleapis.com/chrome-for-testing-public/$CHROME_VERSION/linux64/chromedriver-linux64.zip
        unzip -q /tmp/chromedriver.zip -d /tmp/chromedriver
        sudo mv /tmp/chromedriver/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
        sudo chmod +x /usr/local/bin/chromedriver

    - name: Install latest GeckoDriver (Firefox)
      run: |
        GECKO_VER=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | jq -r '.tag_name')
        wget -q -O /tmp/geckodriver.tar.gz https://github.com/mozilla/geckodriver/releases/download/$GECKO_VER/geckodriver-$GECKO_VER-linux64.tar.gz
        tar -xzf /tmp/geckodriver.tar.gz -C /tmp
        sudo mv /tmp/geckodriver /usr/local/bin/geckodriver
        sudo chmod +x /usr/local/bin/geckodriver

    - name: Install EdgeDriver to match Edge
      run: |
        EDGE_MAJOR_VERSION=$(echo $EDGE_VERSION | cut -d'.' -f1)
        echo "Installing EdgeDriver for version $EDGE_MAJOR_VERSION"
        wget -q -O /tmp/edgedriver.zip "https://msedgedriver.azureedge.net/$EDGE_VERSION/edgedriver_linux64.zip"
        unzip -q /tmp/edgedriver.zip -d /tmp/edgedriver
        sudo mv /tmp/edgedriver/msedgedriver /usr/local/bin/msedgedriver
        sudo chmod +x /usr/local/bin/msedgedriver

    - name: Debug browser versions
      run: |
        echo "Chrome version: $CHROME_VERSION"
        echo "Firefox version: $FIREFOX_VERSION"
        echo "Edge version: $EDGE_VERSION"

    - name: Build project
      run: dotnet build --no-restore

    - name: Set ALLURE_ENV
      run: echo "ALLURE_ENV=CI" >> $GITHUB_ENV

    - name: Run UI Tests
      run: dotnet test SauceDemoAutomationUI/SauceDemoAutomationUI.csproj --logger:"console;verbosity=detailed"

    - name: Run API Tests
      run: dotnet test SauceDemoAutomationAPI/SauceDemoAutomationAPI.csproj --logger:"console;verbosity=detailed"

    - name: Copy Allure Results to unified folder
      run: |
        mkdir -p TestResults/$ALLURE_ENV
        cp -r SauceDemoAutomationUI/bin/Debug/net8.0/allure-results/* TestResults/$ALLURE_ENV || true
        cp -r SauceDemoAutomationAPI/bin/Debug/net8.0/allure-results/* TestResults/$ALLURE_ENV || true

    - name: Download previous Allure history
      id: download_history
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: allure-history
        path: history

    - name: Copy history into results
      if: steps.download_history.outcome == 'success'
      run: |
        echo "Previous history found. Copying..."
        mkdir -p TestResults/$ALLURE_ENV/history
        cp -r history/* TestResults/$ALLURE_ENV/history/ || true

    - name: Generate Allure Report
      run: |
        npm install -g allure-commandline --save-dev
        allure generate TestResults/$ALLURE_ENV --clean -o AllureReport

    - name: Upload Allure Report
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: AllureReport

    - name: Upload Allure history
      uses: actions/upload-artifact@v4
      with:
        name: allure-history
        path: AllureReport/history

    - name: Deploy Allure Report to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./AllureReport
        destination_dir: allure
