name: CI SauceDemo Automation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install browsers
      run: |
        sudo apt-get update
        sudo apt-get install -y wget curl gnupg unzip

        # Install Google Chrome
        curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-linux.gpg
        echo "deb [signed-by=/usr/share/keyrings/google-linux.gpg arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update && sudo apt-get install -y google-chrome-stable

        # Install Firefox (proper APT version - fixed)
        sudo snap remove firefox || true
        sudo apt-get remove -y firefox || true
        sudo add-apt-repository -y ppa:mozillateam/ppa
        echo 'Package: *' | sudo tee /etc/apt/preferences.d/mozilla-firefox
        echo 'Pin: release o=LP-PPA-mozillateam' | sudo tee -a /etc/apt/preferences.d/mozilla-firefox
        echo 'Pin-Priority: 1001' | sudo tee -a /etc/apt/preferences.d/mozilla-firefox
        sudo apt-get update && sudo apt-get install -y firefox

        # Install Microsoft Edge (simplified and more reliable)
        curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
        sudo install -o root -g root -m 644 microsoft.gpg /usr/share/keyrings/
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/edge stable main" | sudo tee /etc/apt/sources.list.d/microsoft-edge.list
        sudo apt-get update && sudo apt-get install -y microsoft-edge-stable || echo "Edge installation failed, will skip Edge tests"

        echo "Browser versions:"
        google-chrome --version || echo "Chrome not found"
        firefox --version || echo "Firefox not found"  
        microsoft-edge --version || echo "Edge not found"

    - name: Install browser drivers
      run: |
        set -e
        rm -rf chromedriver* geckodriver* edgedriver* temp_chromedriver msedgedriver

        # Install ChromeDriver
        CHROME_MAJOR=$(google-chrome --version | grep -oP '\d+' | head -1)
        DRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_${CHROME_MAJOR}")
        echo "Installing ChromeDriver version: $DRIVER_VERSION"
        wget -q "https://storage.googleapis.com/chrome-for-testing-public/${DRIVER_VERSION}/linux64/chromedriver-linux64.zip"
        unzip -o -q chromedriver-linux64.zip -d temp_chromedriver
        sudo mv temp_chromedriver/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
        sudo chmod +x /usr/local/bin/chromedriver
        rm -rf temp_chromedriver chromedriver-linux64.zip

        # Install GeckoDriver (Firefox)
        GECKO_VERSION=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | grep tag_name | cut -d '"' -f 4)
        echo "Installing GeckoDriver version: $GECKO_VERSION"
        wget -q "https://github.com/mozilla/geckodriver/releases/download/${GECKO_VERSION}/geckodriver-${GECKO_VERSION}-linux64.tar.gz"
        tar -xzf geckodriver-*.tar.gz
        sudo mv geckodriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/geckodriver
        rm geckodriver-*.tar.gz

        # Install EdgeDriver (improved and more reliable)
        if microsoft-edge --version > /dev/null 2>&1; then
          EDGE_VERSION=$(microsoft-edge --version | grep -oP '\d+\.\d+\.\d+\.\d+' | head -1)
          echo "Edge version found: $EDGE_VERSION"
          
          if [ -n "$EDGE_VERSION" ]; then
            EDGE_MAJOR=$(echo $EDGE_VERSION | cut -d. -f1)
            echo "Downloading EdgeDriver for major version: $EDGE_MAJOR"
            
            # Clean up any existing files first
            rm -f edgedriver_linux64.zip
            
            # Try to download EdgeDriver with proper validation
            EDGEDRIVER_DOWNLOADED=false
            
            if wget -q --spider "https://msedgedriver.azureedge.net/${EDGE_VERSION}/edgedriver_linux64.zip" 2>/dev/null; then
              if wget -q "https://msedgedriver.azureedge.net/${EDGE_VERSION}/edgedriver_linux64.zip" -O edgedriver_linux64.zip; then
                echo "Downloaded EdgeDriver exact version"
                EDGEDRIVER_DOWNLOADED=true
              fi
            elif wget -q --spider "https://msedgedriver.azureedge.net/$(echo $EDGE_VERSION | cut -d. -f1-3).0/edgedriver_linux64.zip" 2>/dev/null; then
              if wget -q "https://msedgedriver.azureedge.net/$(echo $EDGE_VERSION | cut -d. -f1-3).0/edgedriver_linux64.zip" -O edgedriver_linux64.zip; then
                echo "Downloaded EdgeDriver without patch version"
                EDGEDRIVER_DOWNLOADED=true
              fi
            fi
            
            # Only try to unzip if download was successful and file exists with content
            if [ "$EDGEDRIVER_DOWNLOADED" = true ] && [ -s "edgedriver_linux64.zip" ]; then
              if unzip -t edgedriver_linux64.zip > /dev/null 2>&1; then
                unzip -o -q edgedriver_linux64.zip
                if [ -f "msedgedriver" ]; then
                  sudo mv msedgedriver /usr/local/bin/
                  sudo chmod +x /usr/local/bin/msedgedriver
                  echo "EdgeDriver installed successfully"
                else
                  echo "EdgeDriver binary not found after extraction"
                  EDGEDRIVER_DOWNLOADED=false
                fi
              else
                echo "Downloaded zip file is corrupted"
                EDGEDRIVER_DOWNLOADED=false
              fi
              rm -f edgedriver_linux64.zip
            fi
            
            # Create dummy driver if download/installation failed
            if [ "$EDGEDRIVER_DOWNLOADED" != true ]; then
              echo "EdgeDriver download/installation failed, creating dummy driver"
              echo '#!/bin/bash' | sudo tee /usr/local/bin/msedgedriver > /dev/null
              echo 'echo "EdgeDriver not available"' | sudo tee -a /usr/local/bin/msedgedriver > /dev/null
              echo 'exit 1' | sudo tee -a /usr/local/bin/msedgedriver > /dev/null
              sudo chmod +x /usr/local/bin/msedgedriver
            fi
          fi
        else
          echo "Edge not installed, skipping EdgeDriver"
          # Create dummy driver since Edge is not installed
          echo '#!/bin/bash' | sudo tee /usr/local/bin/msedgedriver > /dev/null
          echo 'echo "Edge browser not installed"' | sudo tee -a /usr/local/bin/msedgedriver > /dev/null
          echo 'exit 1' | sudo tee -a /usr/local/bin/msedgedriver > /dev/null
          sudo chmod +x /usr/local/bin/msedgedriver
        fi

        # Verify installations
        echo "=== Driver Versions ==="
        chromedriver --version || echo "ChromeDriver not found"
        geckodriver --version || echo "GeckoDriver not found"
        msedgedriver --version 2>/dev/null || echo "EdgeDriver not available"
        echo "======================="

    - name: Setup virtual display for headless testing
      run: |
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        sleep 3
        echo "DISPLAY=:99" >> $GITHUB_ENV
        echo "Virtual display setup completed"

    - name: Restore dependencies
      run: dotnet restore

    - name: Build project
      run: dotnet build --no-restore

    - name: Run UI Tests - Chrome and Firefox Only
      continue-on-error: true
      env:
        DISPLAY: :99
      run: |
        echo "Starting UI tests (Chrome and Firefox only)..."
        dotnet test SauceDemoAutomationUI/SauceDemoAutomationUI.csproj \
          --logger:"console;verbosity=detailed" \
          --filter="TestCategory!=Edge" \
          --results-directory TestResults \
          || echo "Some UI tests failed, continuing..."

    - name: Run Edge Tests (if EdgeDriver available)
      continue-on-error: true
      env:
        DISPLAY: :99
      run: |
        if msedgedriver --version > /dev/null 2>&1; then
          echo "EdgeDriver available, running Edge tests..."
          dotnet test SauceDemoAutomationUI/SauceDemoAutomationUI.csproj \
            --logger:"console;verbosity=detailed" \
            --filter="TestCategory=Edge" \
            --results-directory TestResults \
            || echo "Edge tests failed, continuing..."
        else
          echo "EdgeDriver not available, skipping Edge tests"
        fi

    - name: Run API Tests
      continue-on-error: true
      run: |
        echo "Starting API tests..."
        dotnet test SauceDemoAutomationAPI/SauceDemoAutomationAPI.csproj \
          --logger:"console;verbosity=detailed" \
          --results-directory TestResults \
          || echo "Some API tests failed, continuing..."

    - name: Copy Allure Results to unified folder
      run: |
        echo "Copying Allure results..."
        mkdir -p TestResults/AllureResults
        
        # Copy UI test results
        if [ -d "SauceDemoAutomationUI/bin/Debug/net8.0/allure-results" ]; then
          cp -r SauceDemoAutomationUI/bin/Debug/net8.0/allure-results/* TestResults/AllureResults/ || echo "No UI allure results found"
        fi
        
        # Copy API test results  
        if [ -d "SauceDemoAutomationAPI/bin/Debug/net8.0/allure-results" ]; then
          cp -r SauceDemoAutomationAPI/bin/Debug/net8.0/allure-results/* TestResults/AllureResults/ || echo "No API allure results found"
        fi
        
        # List what we have
        echo "Allure results contents:"
        ls -la TestResults/AllureResults/ || echo "No allure results directory"

    - name: Clone gh-pages branch to get previous Allure history
      run: |
        echo "Cloning gh-pages for history..."
        git clone --depth 1 --branch gh-pages https://github.com/${{ github.repository }} gh-pages || echo "No gh-pages branch found"
        
        mkdir -p TestResults/AllureResults/history
        
        if [ -d "gh-pages/allure/history" ]; then
          cp -r gh-pages/allure/history/* TestResults/AllureResults/history/ || echo "No previous history found"
          echo "Previous history copied"
        else
          echo "No previous history found"
        fi

    - name: Generate Allure Report
      run: |
        echo "Installing Allure..."
        npm install -g allure-commandline --save-dev
        
        echo "Generating Allure report..."
        if [ "$(ls -A TestResults/AllureResults 2>/dev/null)" ]; then
          allure generate TestResults/AllureResults --clean -o AllureReport
          echo "Allure report generated successfully"
        else
          echo "No test results found, creating empty report"
          mkdir -p AllureReport
          echo "<html><body><h1>No test results available</h1></body></html>" > AllureReport/index.html
        fi

    - name: Upload Allure Report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: AllureReport

    - name: Upload Allure history as artifact
      uses: actions/upload-artifact@v4
      with:
        name: allure-history
        path: AllureReport/history
      if: always()

    - name: Deploy Allure Report to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./AllureReport
        destination_dir: allure
      if: always()

    - name: Test Summary
      if: always()
      run: |
        echo "=== Test Execution Summary ==="
        echo "Workflow completed at: $(date)"
        echo "Check the Allure report for detailed results"
        echo "Report will be available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/allure/"
        echo "=============================="