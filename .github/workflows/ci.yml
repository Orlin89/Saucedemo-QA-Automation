name: CI SauceDemo Automation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install browsers
      run: |
        sudo apt-get update
        sudo apt-get install -y wget curl gnupg unzip jq

        # Install Google Chrome
        curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-linux.gpg
        echo "deb [signed-by=/usr/share/keyrings/google-linux.gpg arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update && sudo apt-get install -y google-chrome-stable

        # Install Microsoft Edge
        curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
        sudo install -o root -g root -m 644 microsoft.gpg /usr/share/keyrings/
        sudo sh -c 'echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/edge stable main" > /etc/apt/sources.list.d/microsoft-edge.list'
        sudo apt-get update && sudo apt-get install -y microsoft-edge-stable

        sudo apt-get install -y firefox

        google-chrome --version
        firefox --version
        microsoft-edge --version

    - name: Install browser drivers to /usr/local/bin
      run: |
        sudo apt-get install -y wget unzip curl jq

        # Clean old files
        rm -rf chromedriver-linux64 chromedriver-linux64.zip temp_chromedriver
        rm -f geckodriver-*.tar.gz geckodriver
        rm -f edgedriver_linux64.zip msedgedriver

        # ChromeDriver (from Chrome for Testing JSON API)
        DRIVER_URL=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json \
          | jq -r '.channels.Stable.downloads.chromedriver[] | select(.platform=="linux64") | .url')
        wget -q "$DRIVER_URL" -O chromedriver-linux64.zip

        FILESIZE=$(stat -c%s chromedriver-linux64.zip)
        if [ "$FILESIZE" -lt 1000000 ]; then
          echo "Downloaded chromedriver-linux64.zip is too small, exiting."
          exit 1
        fi

        unzip -o -q chromedriver-linux64.zip -d temp_chromedriver
        CHROMEDRIVER_PATH=$(find temp_chromedriver -type f -name chromedriver | head -1)

        if [ -z "$CHROMEDRIVER_PATH" ]; then
          echo "chromedriver executable not found in archive"
          exit 1
        else
          sudo mv "$CHROMEDRIVER_PATH" /usr/local/bin/chromedriver
          sudo chmod +x /usr/local/bin/chromedriver
        fi

        rm -rf temp_chromedriver chromedriver-linux64.zip

        # GeckoDriver
        GECKO_VERSION=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | grep tag_name | cut -d '"' -f 4)
        wget -q "https://github.com/mozilla/geckodriver/releases/download/${GECKO_VERSION}/geckodriver-${GECKO_VERSION}-linux64.tar.gz"

        tar -xzf geckodriver-*.tar.gz
        sudo mv geckodriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/geckodriver
        rm geckodriver-*.tar.gz

        # EdgeDriver
        EDGE_VERSION_FULL=$(microsoft-edge --version | grep -oP '\d+\.\d+\.\d+\.\d+')
        EDGE_VERSION=$(echo $EDGE_VERSION_FULL | grep -oP '^\d+\.\d+\.\d+')
        wget -q "https://msedgedriver.azureedge.net/${EDGE_VERSION}/edgedriver_linux64.zip"

        unzip -o -q edgedriver_linux64.zip
        sudo mv msedgedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/msedgedriver
        rm edgedriver_linux64.zip

        # Verify drivers versions
        chromedriver --version
        geckodriver --version
        msedgedriver --version

    - name: Build project
      run: dotnet build --no-restore

    - name: Run UI Tests
      continue-on-error: true
      run: dotnet test SauceDemoAutomationUI/SauceDemoAutomationUI.csproj --logger:"console;verbosity=detailed"

    - name: Run API Tests
      continue-on-error: true
      run: dotnet test SauceDemoAutomationAPI/SauceDemoAutomationAPI.csproj --logger:"console;verbosity=detailed"

    - name: Copy Allure Results to unified folder
      run: |
        mkdir -p TestResults/AllureResults
        cp -r SauceDemoAutomationUI/bin/Debug/net8.0/allure-results/* TestResults/AllureResults || true
        cp -r SauceDemoAutomationAPI/bin/Debug/net8.0/allure-results/* TestResults/AllureResults || true

    - name: Clone gh-pages branch to get previous Allure history
      run: |
        git clone --depth 1 --branch gh-pages https://github.com/${{ github.repository }} gh-pages
        mkdir -p TestResults/AllureResults/history
        if [ -d "gh-pages/allure/history" ]; then
          cp -r gh-pages/allure/history/* TestResults/AllureResults/history/ || true
        else
          echo "No previous history found"
        fi

    - name: Generate Allure Report
      run: |
        npm install -g allure-commandline --save-dev
        allure generate TestResults/AllureResults --clean -o AllureReport

    - name: Upload Allure Report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: AllureReport

    - name: Upload Allure history as artifact
      uses: actions/upload-artifact@v4
      with:
        name: allure-history
        path: AllureReport/history

    - name: Deploy Allure Report to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./AllureReport
        destination_dir: allure
