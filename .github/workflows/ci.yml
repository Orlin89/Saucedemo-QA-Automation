name: CI SauceDemo Automation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install dependencies
      run: dotnet restore

    - name: Install browsers and drivers
      run: |
        echo "Installing latest Chrome..."
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list'

        echo "Installing latest Edge..."
        curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /usr/share/keyrings/microsoft-edge.gpg > /dev/null
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-edge.gpg] https://packages.microsoft.com/repos/edge stable main" | sudo tee /etc/apt/sources.list.d/microsoft-edge.list

        echo "Updating package lists..."
        sudo apt-get update

        echo "Installing browsers..."
        sudo apt-get install -y google-chrome-stable firefox microsoft-edge-stable unzip wget

        echo "Installing ChromeDriver..."
        CHROME_VERSION=$(google-chrome --version | grep -oP '\d+' | head -1)
        DRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_${CHROME_VERSION}")
        wget -q "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/${DRIVER_VERSION}/linux64/chromedriver-linux64.zip"
        unzip chromedriver-linux64.zip
        sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
        rm -rf chromedriver-linux64*

        echo "Installing GeckoDriver..."
        GECKO_VERSION=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | grep tag_name | cut -d '"' -f 4)
        wget -q "https://github.com/mozilla/geckodriver/releases/download/${GECKO_VERSION}/geckodriver-${GECKO_VERSION}-linux64.tar.gz"
        tar -xzf geckodriver-*.tar.gz
        sudo mv geckodriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/geckodriver
        rm geckodriver-*.tar.gz

        echo "Installing EdgeDriver..."
        EDGE_VERSION_FULL=$(microsoft-edge --version | grep -oP '\d+\.\d+\.\d+\.\d+')
        EDGE_VERSION=$(echo $EDGE_VERSION_FULL | grep -oP '^\d+\.\d+\.\d+')
        wget -q "https://msedgedriver.azureedge.net/${EDGE_VERSION}/edgedriver_linux64.zip"
        unzip edgedriver_linux64.zip
        sudo mv msedgedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/msedgedriver
        rm edgedriver_linux64.zip

        echo "Installed versions:"
        google-chrome --version || google-chrome-stable --version
        firefox --version
        microsoft-edge --version || microsoft-edge-stable --version
        chromedriver --version
        geckodriver --version
        msedgedriver --version

    - name: Build project
      run: dotnet build --no-restore

    - name: Run UI Tests
      continue-on-error: true
      run: dotnet test SauceDemoAutomationUI/SauceDemoAutomationUI.csproj --logger:"console;verbosity=detailed"

    - name: Run API Tests
      continue-on-error: true
      run: dotnet test SauceDemoAutomationAPI/SauceDemoAutomationAPI.csproj --logger:"console;verbosity=detailed"

    - name: Copy Allure Results to unified folder
      run: |
        mkdir -p TestResults/AllureResults
        cp -r SauceDemoAutomationUI/bin/Debug/net8.0/allure-results/* TestResults/AllureResults || true
        cp -r SauceDemoAutomationAPI/bin/Debug/net8.0/allure-results/* TestResults/AllureResults || true

    - name: Clone gh-pages branch to get previous Allure history
      run: |
        git clone --depth 1 --branch gh-pages https://github.com/${{ github.repository }} gh-pages
        mkdir -p TestResults/AllureResults/history
        if [ -d "gh-pages/allure/history" ]; then
          cp -r gh-pages/allure/history/* TestResults/AllureResults/history/ || true
        else
          echo "No previous history found"
        fi

    - name: Generate Allure Report
      run: |
        npm install -g allure-commandline --save-dev
        allure generate TestResults/AllureResults --clean -o AllureReport

    - name: Upload Allure Report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: AllureReport

    - name: Upload Allure history as artifact
      uses: actions/upload-artifact@v4
      with:
        name: allure-history
        path: AllureReport/history

    - name: Deploy Allure Report to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./AllureReport
        destination_dir: allure
