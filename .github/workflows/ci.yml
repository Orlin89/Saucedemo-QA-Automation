name: CI SauceDemo Automation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install browsers
      run: |
        sudo apt-get update
        sudo apt-get install -y wget curl gnupg unzip

        # Install Google Chrome
        curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-linux.gpg
        echo "deb [signed-by=/usr/share/keyrings/google-linux.gpg arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update && sudo apt-get install -y google-chrome-stable

        # Install Microsoft Edge
        curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
        sudo install -o root -g root -m 644 microsoft.gpg /usr/share/keyrings/
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/edge stable main" | sudo tee /etc/apt/sources.list.d/microsoft-edge.list
        sudo apt-get update && sudo apt-get install -y microsoft-edge-stable

        # Install Firefox (remove snap, use apt version for better compatibility)
        sudo apt-get remove -y firefox
        sudo snap remove firefox || true
        sudo add-apt-repository -y ppa:mozillateam/ppa
        sudo apt-get update && sudo apt-get install -y firefox

        google-chrome --version
        firefox --version
        microsoft-edge --version

    - name: Install browser drivers
      run: |
        set -e
        rm -rf chromedriver* geckodriver* edgedriver* temp_chromedriver msedgedriver

        # Install ChromeDriver
        CHROME_MAJOR=$(google-chrome --version | grep -oP '\d+' | head -1)
        DRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_${CHROME_MAJOR}")
        echo "Installing ChromeDriver version: $DRIVER_VERSION"
        wget -q "https://storage.googleapis.com/chrome-for-testing-public/${DRIVER_VERSION}/linux64/chromedriver-linux64.zip"
        unzip -o -q chromedriver-linux64.zip -d temp_chromedriver
        sudo mv temp_chromedriver/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
        sudo chmod +x /usr/local/bin/chromedriver
        rm -rf temp_chromedriver chromedriver-linux64.zip

        # Install GeckoDriver (Firefox)
        GECKO_VERSION=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | grep tag_name | cut -d '"' -f 4)
        echo "Installing GeckoDriver version: $GECKO_VERSION"
        wget -q "https://github.com/mozilla/geckodriver/releases/download/${GECKO_VERSION}/geckodriver-${GECKO_VERSION}-linux64.tar.gz"
        tar -xzf geckodriver-*.tar.gz
        sudo mv geckodriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/geckodriver
        rm geckodriver-*.tar.gz

        # Install EdgeDriver (improved logic)
        EDGE_VERSION=$(microsoft-edge --version | grep -oP '\d+\.\d+\.\d+\.\d+' | head -1)
        echo "Edge version found: $EDGE_VERSION"
        if [ -n "$EDGE_VERSION" ]; then
          # Try different EdgeDriver download strategies
          EDGE_MAJOR=$(echo $EDGE_VERSION | cut -d. -f1)
          echo "Trying to download EdgeDriver for major version: $EDGE_MAJOR"
          
          # Strategy 1: Try exact version
          if wget -q "https://msedgedriver.azureedge.net/${EDGE_VERSION}/edgedriver_linux64.zip"; then
            echo "Downloaded EdgeDriver exact version"
          # Strategy 2: Try without patch version (major.minor.build)
          elif wget -q "https://msedgedriver.azureedge.net/$(echo $EDGE_VERSION | cut -d. -f1-3).0/edgedriver_linux64.zip"; then
            echo "Downloaded EdgeDriver without patch version"
          # Strategy 3: Use alternative download method
          else
            echo "Trying alternative EdgeDriver download..."
            LATEST_EDGE=$(curl -s https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/ | grep -oP 'Version: \K\d+\.\d+\.\d+' | head -1)
            if [ -n "$LATEST_EDGE" ]; then
              wget -q "https://msedgedriver.azureedge.net/${LATEST_EDGE}.0/edgedriver_linux64.zip" || echo "EdgeDriver download failed, will skip Edge tests"
            fi
          fi
          
          if [ -f "edgedriver_linux64.zip" ]; then
            unzip -o -q edgedriver_linux64.zip
            sudo mv msedgedriver /usr/local/bin/ 2>/dev/null || echo "EdgeDriver move failed"
            sudo chmod +x /usr/local/bin/msedgedriver 2>/dev/null || echo "EdgeDriver chmod failed"
            rm -f edgedriver_linux64.zip
            echo "EdgeDriver installed successfully"
          else
            echo "EdgeDriver download failed, creating dummy driver"
            echo '#!/bin/bash' | sudo tee /usr/local/bin/msedgedriver
            echo 'echo "EdgeDriver not available"' | sudo tee -a /usr/local/bin/msedgedriver
            echo 'exit 1' | sudo tee -a /usr/local/bin/msedgedriver
            sudo chmod +x /usr/local/bin/msedgedriver
          fi
        else
          echo "Edge version not found, skipping EdgeDriver."
        fi

        # Verify installations
        echo "=== Driver Versions ==="
        chromedriver --version || echo "ChromeDriver not found"
        geckodriver --version || echo "GeckoDriver not found"
        msedgedriver --version || echo "EdgeDriver not available"
        echo "======================="

    - name: Setup virtual display for headless testing
      run: |
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        echo "DISPLAY=:99" >> $GITHUB_ENV

    - name: Restore dependencies
      run: dotnet restore

    - name: Build project
      run: dotnet build --no-restore

    - name: Run UI Tests
      continue-on-error: true
      env:
        DISPLAY: :99
      run: dotnet test SauceDemoAutomationUI/SauceDemoAutomationUI.csproj --logger:"console;verbosity=detailed" --filter="TestCategory!=Edge" # Temporarily skip Edge tests

    - name: Run API Tests
      continue-on-error: true
      run: dotnet test SauceDemoAutomationAPI/SauceDemoAutomationAPI.csproj --logger:"console;verbosity=detailed"

    - name: Copy Allure Results to unified folder
      run: |
        mkdir -p TestResults/AllureResults
        cp -r SauceDemoAutomationUI/bin/Debug/net8.0/allure-results/* TestResults/AllureResults || true
        cp -r SauceDemoAutomationAPI/bin/Debug/net8.0/allure-results/* TestResults/AllureResults || true

    - name: Clone gh-pages branch to get previous Allure history
      run: |
        git clone --depth 1 --branch gh-pages https://github.com/${{ github.repository }} gh-pages
        mkdir -p TestResults/AllureResults/history
        if [ -d "gh-pages/allure/history" ]; then
          cp -r gh-pages/allure/history/* TestResults/AllureResults/history/ || true
        else
          echo "No previous history found"
        fi

    - name: Generate Allure Report
      run: |
        npm install -g allure-commandline --save-dev
        allure generate TestResults/AllureResults --clean -o AllureReport

    - name: Upload Allure Report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: AllureReport

    - name: Upload Allure history as artifact
      uses: actions/upload-artifact@v4
      with:
        name: allure-history
        path: AllureReport/history

    - name: Deploy Allure Report to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./AllureReport
        destination_dir: allure